tags:
  - name: User Management
    description: Endpoints for managing users

paths:
  /user:
    post:
      summary: Add a new user
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - email
                - password
                - first_name
                - last_name
                - date_of_birth
                - roles
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
                first_name:
                  type: string
                  description: User's first name
                last_name:
                  type: string
                  description: User's last name
                date_of_birth:
                  type: string
                  format: date
                  description: User's date of birth (YYYY-MM-DD)
                roles:
                  type: array
                  items:
                    type: string
                  description: A list of roles assigned to the user (e.g., ["assistant", "professor", "admin"])
                avatar:
                  type: string
                  format: binary
                  description: User's avatar image file (JPEG or PNG, max size 5MB)
      responses:
        201:
          description: User added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User user@example.com added successfully.
        400:
          description: Validation errors or missing fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: Invalid email format.
        409:
          description: Conflict - user with the email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User with this email already exists.
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error.
